"""Base repository interfaces for the portfolio domain."""

from typing import Protocol, Optional, List
from uuid import UUID

from ..models.portfolio import Portfolio
from ..models.holding import Equity, EquityHolding, CashHolding
from ..models.activity_report_entry import ActivityReportEntry


class PortfolioRepository(Protocol):
    """Repository interface for Portfolio aggregates."""
    
    def get(self, portfolio_id: UUID, conn=None) -> Optional[Portfolio]: ...
    def find_by_tenant_id(self, tenant_id: UUID, conn=None) -> List[Portfolio]: ...
    def find_by_name(self, tenant_id: UUID, name: str, conn=None) -> Optional[Portfolio]: ...
    def save(self, portfolio: Portfolio, conn=None) -> None: ...
    def delete(self, portfolio_id: UUID, conn=None) -> None: ...
    def exists(self, portfolio_id: UUID, conn=None) -> bool: ...


class EquityRepository(Protocol):
    """Repository interface for Equity entities."""
    
    def get(self, equity_id: UUID, conn=None) -> Optional[Equity]: ...
    def find_by_symbol(self, symbol: str, exchange: str, conn=None) -> Optional[Equity]: ...
    def find_by_portfolio_id(self, portfolio_id: UUID, conn=None) -> List[Equity]: ...
    def search(self, query: str, limit: int = 50, conn=None) -> List[Equity]: ...
    def save(self, equity: Equity, conn=None) -> None: ...
    def delete(self, equity_id: UUID, conn=None) -> None: ...
    def exists(self, equity_id: UUID, conn=None) -> bool: ...


class EquityHoldingRepository(Protocol):
    """Repository interface for EquityHolding entities."""
    
    def find_by_portfolio_id(
        self, 
        portfolio_id: UUID, 
        *, 
        limit: int = 100, 
        offset: int = 0, 
        conn=None
    ) -> List[EquityHolding]: ...
    def get(self, holding_id: UUID, conn=None) -> Optional[EquityHolding]: ...
    def find_by_portfolio_and_equity(
        self, 
        portfolio_id: UUID, 
        equity_id: UUID, 
        conn=None
    ) -> Optional[EquityHolding]: ...
    def save(self, holding: EquityHolding, conn=None) -> None: ...
    def delete(self, holding_id: UUID, conn=None) -> None: ...
    def batch_save(self, holdings: List[EquityHolding], conn=None) -> None: ...
    def exists(self, holding_id: UUID, conn=None) -> bool: ...


class CashHoldingRepository(Protocol):
    """Repository interface for CashHolding entities."""
    
    def find_by_portfolio_id(
        self, 
        portfolio_id: UUID, 
        *, 
        limit: int = 100, 
        offset: int = 0, 
        conn=None
    ) -> List[CashHolding]: ...
    def get(self, holding_id: UUID, conn=None) -> Optional[CashHolding]: ...
    def find_by_portfolio_and_currency(
        self, 
        portfolio_id: UUID, 
        currency: str, 
        conn=None
    ) -> Optional[CashHolding]: ...
    def save(self, cash_holding: CashHolding, conn=None) -> None: ...
    def delete(self, holding_id: UUID, conn=None) -> None: ...
    def batch_save(self, holdings: List[CashHolding], conn=None) -> None: ...
    def exists(self, holding_id: UUID, conn=None) -> bool: ...


class ActivityReportEntryRepository(Protocol):
    """Repository interface for ActivityReportEntry entities."""
    
    def find_by_portfolio_id(
        self, 
        portfolio_id: UUID, 
        *, 
        limit: int = 100, 
        offset: int = 0, 
        activity_type: Optional[str] = None, 
        conn=None
    ) -> List[ActivityReportEntry]: ...
    def get(self, entry_id: UUID, conn=None) -> Optional[ActivityReportEntry]: ...
    def find_by_date_range(
        self, 
        portfolio_id: UUID, 
        start_date: str, 
        end_date: str, 
        conn=None
    ) -> List[ActivityReportEntry]: ...
    def save(self, entry: ActivityReportEntry, conn=None) -> None: ...
    def delete(self, entry_id: UUID, conn=None) -> None: ...
    def batch_save(self, entries: List[ActivityReportEntry], conn=None) -> None: ...
    def exists(self, entry_id: UUID, conn=None) -> bool: ...


class HoldingRepository(Protocol):
    """Unified repository interface for both equity and cash holdings."""
    
    def find_equity_holdings_by_portfolio_id(
        self, 
        portfolio_id: UUID, 
        *, 
        limit: int = 100, 
        offset: int = 0, 
        conn=None
    ) -> List[EquityHolding]: ...
    
    def find_cash_holdings_by_portfolio_id(
        self, 
        portfolio_id: UUID, 
        *, 
        limit: int = 100, 
        offset: int = 0, 
        conn=None
    ) -> List[CashHolding]: ...
    
    def get_equity_holding(self, holding_id: UUID, conn=None) -> Optional[EquityHolding]: ...
    def get_cash_holding(self, holding_id: UUID, conn=None) -> Optional[CashHolding]: ...
    
    def find_equity_by_portfolio_and_stock(
        self, 
        portfolio_id: UUID, 
        stock_id: UUID, 
        conn=None
    ) -> Optional[EquityHolding]: ...
    
    def find_cash_by_portfolio_and_currency(
        self, 
        portfolio_id: UUID, 
        currency: str, 
        conn=None
    ) -> Optional[CashHolding]: ...
    
    def save_equity_holding(self, holding: EquityHolding, conn=None) -> None: ...
    def save_cash_holding(self, holding: CashHolding, conn=None) -> None: ...
    def delete_equity_holding(self, holding_id: UUID, conn=None) -> None: ...
    def delete_cash_holding(self, holding_id: UUID, conn=None) -> None: ...
    def batch_save_equity_holdings(self, holdings: List[EquityHolding], conn=None) -> None: ...
    def batch_save_cash_holdings(self, holdings: List[CashHolding], conn=None) -> None: ...
